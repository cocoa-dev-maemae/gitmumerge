#!/bin/bash
set -e

destination_branch=$1
shift
candidate_branches=($@)

merge_into_candidate_from_destination() {
  candidate_branch=$1
  git checkout ${candidate_branch}
  set +e
  git merge --no-ff ${destination_branch}
  set -e
}

merge_into_destination_from_candidate() {
  candidate_branch=$1
  git checkout ${destination_branch}
  set +e
  git merge --no-ff ${candidate_branch}
  set -e
}

# execute merge
# $1 a candidate branch name
# $2 merge direction
#    0:from a destination branch to a candidate branch
#    1:from a candidate branch to a destination branch
exec_merge() {
  candidate_branch=$1
  merge_direction=$2
  dest=`echo -e "\e[1;31;40m${destination_branch}\e[00m"`
  cand=`echo -e "\e[1;31;40m${candidate_branch}\e[00m"`
  while true; do
    if [ $merge_direction -eq 0 ];then
      inq="Do you merge into ${cand} from ${dest} [Y/n]: "
    fi

    if [ $merge_direction -eq 1 ];then
      inq="Do you merge into ${dest} from ${cand} [Y/n]: "
    fi

    read -p "$inq" answer
    case $answer in
    '' | [Yy]* )
      if [ $merge_direction -eq 0 ];then
        merge_into_candidate_from_destination ${candidate_branch}
      fi

      if [ $merge_direction -eq 1 ];then
        merge_into_destination_from_candidate ${candidate_branch}
      fi
      break;
      ;;
    [Nn]* )
      set -e
      exit 1
      break;
      ;;
    * )
      echo Please answer Y or N
    esac
  done;
}

for candidate_branch in "${candidate_branches[@]}"; do
  exec_merge ${candidate_branch} 0
  exec_merge ${candidate_branch} 1
done

git checkout ${destination_branch}
echo -e "\e[1;31mMerging branches has done\e[00m"
